// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(uuid())  
  name              String   
  email             String          @unique
  password          String?  
  googleId          String?         @unique
  avatar            String?  
  role              Role            @default(USER)
  authProvider      AuthProvider    @default(EMAIL_PASSWORD)
  isVerified        Boolean         @default(false)
  deletedAt         DateTime?  
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  instructorDetails InstructorDetails? @relation("UserToInstructorDetails") 
  userProfile       UserProfile?    @relation("UserToUserProfile") 
  verifications     UserVerification[] @relation("UserToVerification")
}

model UserProfile {
  id            String    @id @default(uuid())
  userId        String    @unique 
  bio           String?   
  education     String?   
  skills        String?   
  phoneNumber   String?   @db.VarChar(20)
  country       String?   @db.VarChar(100) 
  city          String?   @db.VarChar(100) 
  address       String?   
  dateOfBirth   DateTime? 
  gender        Gender?   
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation("UserToUserProfile", fields: [userId], references: [id], onDelete: Cascade)
}


model UserVerification {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  email        String   @unique
  otpCode      String   @map("otp_code") @db.VarChar(6)
  expiresAt    DateTime @map("expires_at")
  attemptCount Int      @default(0) @map("attempt_count")
  isUsed       Boolean  @default(false) @map("is_used")
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation("UserToVerification", fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_verifications")
}

model InstructorDetails {
  id                     String   @id @default(uuid())
  userId                 String   @unique
  totalStudents          Int      @default(0)
  areaOfExpertise        String
  professionalExperience String
  about                  String?
  approved               Boolean  @default(false)
  website                String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation("UserToInstructorDetails", fields: [userId], references: [id], onDelete: Cascade)
}



enum Role {
  USER
  INSTRUCTOR
  ADMIN
}

enum AuthProvider {
  EMAIL_PASSWORD
  GOOGLE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}