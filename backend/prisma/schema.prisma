// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(uuid())  
  name              String   
  email             String          @unique
  password          String?  
  googleId          String?         @unique
  avatar            String?  
  role              Role            @default(USER)
  authProvider      AuthProvider    @default(EMAIL_PASSWORD)
  isVerified        Boolean         @default(false)
  deletedAt         DateTime?  
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  instructorDetails InstructorDetails? @relation("UserToInstructorDetails") 
  userProfile       UserProfile?    @relation("UserToUserProfile") 
  verifications     UserVerification[] @relation("UserToVerification")
  categories        Category[]         @relation("CategoryCreator")
   coursesCreated    Course[]        @relation("CourseCreator")
}

model UserProfile {
  id            String    @id @default(uuid())
  userId        String    @unique 
  bio           String?   
  education     String?   
  skills        String?   
  phoneNumber   String?   @db.VarChar(20)
  country       String?   @db.VarChar(100) 
  city          String?   @db.VarChar(100) 
  address       String?   
  dateOfBirth   DateTime? 
  gender        Gender?   
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation("UserToUserProfile", fields: [userId], references: [id], onDelete: Cascade)
}


model UserVerification {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  email        String   @unique
  otpCode      String   @map("otp_code") @db.VarChar(6)
  expiresAt    DateTime @map("expires_at")
  attemptCount Int      @default(0) @map("attempt_count")
  isUsed       Boolean  @default(false) @map("is_used")
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation("UserToVerification", fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_verifications")
}

model InstructorDetails {
  id                     String   @id @default(uuid())
  userId                 String   @unique
  totalStudents          Int      @default(0)
  areaOfExpertise        String
  professionalExperience String
  about                  String?
  approved               Boolean  @default(false)
  website                String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation("UserToInstructorDetails", fields: [userId], references: [id], onDelete: Cascade)
 
}


model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String 
  deletedAt   DateTime?
  creator     User      @relation("CategoryCreator", fields: [createdBy], references: [id] , onDelete:Cascade)
  courses     Course[]  @relation("CourseToCategory")
}



enum Role {
  USER
  INSTRUCTOR
  ADMIN
}

enum AuthProvider {
  EMAIL_PASSWORD
  GOOGLE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}




model Course {
  id             String        @id @default(uuid())
  title          String
  description    String?     
  level          CourseLevel   @default(MEDIUM) 
  price          Decimal?      @default(0.00) 
  thumbnail      String?     
  duration       Int?          
  offer          Decimal?      
  status         CourseStatus  @default(DRAFT) 
  categoryId     String
  category       Category      @relation("CourseToCategory", fields: [categoryId], references: [id])
  createdBy      String
  creator        User          @relation("CourseCreator", fields: [createdBy], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?     
  details        CourseDetails? @relation("CourseToDetails")
}

model CourseDetails {
  id             String    @id @default(uuid())
  courseId       String    @unique // One-to-one relation
  course         Course    @relation("CourseToDetails", fields: [courseId], references: [id], onDelete: Cascade)
  prerequisites  String?   // Text describing required prior knowledge
  longDescription String?  // Extended course description
  objectives     String?   // Learning goals or outcomes
  targetAudience String?   // Who the course is for
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

// Enums for Course
enum CourseLevel {
  BEGINNER
  MEDIUM
  ADVANCED
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}